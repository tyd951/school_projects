
Project 9.1:  Graph coloring problem:  given a undirected graph, G = <N, E>,  
	the graph coloring problem is to find the minumum number of colors to color all nodes in N, 
	such that two adjacent nodes, ni, nj, can not be colored with the same color.  

	Since this problem is a known N-P problem, 
	we are going to use the *first* strategy, method-1 taught in class  to solve this problem.

**************************************
Language:  Java 
Due date:  Java soft copy: 12/8/2017 Friday before Midnight
 	(+1 for early submission, 12/6/2017)

Due date:  Java hard copy: 12/12/2017 Tuesday in class

*******************************
I.  Input (argv[1]): an undirected graph, represented by a list of edges, <ni, nj>, 
   (a bidirectional edge from ni to nj and from nj to ni thw cost is c.)  

The first text line is the number of nodes, N, in G, follows by a list of bidirectional edges, <ni, nj>
	For example:
		5	// there are 5 nodes in the graph 
		1  5  // an edge <1, 5> and <5, 1>
    		2  3  // an edge <2, 3> and <3, 2>
     		1  2  // an edge <1, 2> and <2, 1>
		3  5  // an edge <3, 5> and < 5, 3>
		:
		:
 	
II. Output(argv[2]):
           - Print input pairs
		- Print the initial adjacencyMatrix of the graph.
		- Pring the number of colors used to color.
		- Print the final adjacentcyMatrix with the assign colors in the diagonal of the matrix. 

*******************************
III. Data structure:
*******************************
 - A node class
   ID (int)
   Color (int) // initiallize to 0 (no color)
   numEdges (int) // initiallize to 0 (no edge)
   next (node pointer)
  	
 - A graphColoring class
 	 - adjacencyMatrix: a n+1 by n+1 adjacent matrix for the graph.
			 // initiallized to 0
			// We use adjacencyMatrix[i][i] for storing the node's assigned color.

     	 - listHead (node pointer) // point to a dummy node

    - uncolorNode (int) // 1, 2, 3, 4, ... N
    - newColor (int) // 1, 2, 3, ... (Red, Green, Blue, Yallow, Purple, Orange, Black, ...)
    - numNode (int)
   

    methods:
	- constructor
	- loadMatrix // read from input and fill the adjacentcy Matrix
			
	- insertOneNode(listHead, newNode)  // insert a given newNode into the node list in ascending order

	- constructNodeList (node pointer) // contructs the node list for all nodes in the graph 
					// ** in ascending order by the number of edges nodes have.
    					// this method should call insetOneNode for each node in the graph.
       
	- findUncolorNode (node pointer) 
					// this method looks for an uncolored node 
					// from the listHead of the linked list
				    // it returns the pointer pointing to the first uncolored node it found.

       - checkAdjacent (nodeID, color) // it returns 0 if there is no adjacent nodes use the color
					// look into the matrix at row nodeID

*******************************
III. Algorithm steps
*******************************

step 0: numNode <-- get from input file
	  - dynamically allocate adjacencyMatrix // initiallize to 0
	  - load adjacencyMatrix from the input pairs 
		// Note: for one edge from the input, you need to fill two cells in the matrix
		// 1  5  means an edge <1, 5> and an edge <5, 1>

 	  - print adjacencyMatrix

	  - constructNodeList
 
	  - newColor <-- 0
 
		// get new new color (using 1, 2, 3, ... as the color scheme)
step 1: newColor ++
        currentNode <-- listHead's next // the node after the dummy node
	   
	//use the newColor to color as many un-colored nodes as possible 
Step 2: if currentNode.Color == 0 // if currentNode is an uncolor node 
 		*and* checkAdjacent (currentNode.ID, newColor) == 0
			// currentNode does not have any adjacent node 
			// that are already colored with the newColor 
			// check adjancyMatrix
         then		
	      - adjacentMatrix[currentNode][currentNode] <-- newColor
            - currentNode.Color <-- newColor
		 - currentNode <-- currentNode's next

Step 3: repeat step 2 until the end of the node list.

Step 4: print adjacencyMatrix 

Step 5: repeat steps 1 to 3 until all nodes are colored.

Step 6: print newcolor  // with indication, i.e., number of colors used is ...

        print adjacencyMatrix 

step 7: close all files

	